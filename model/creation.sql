-- MySQL Script generated by MySQL Workbench
-- 10/26/17 00:44:24
-- Model: New Model    Version: 1.0
-- MySQL Workbench Forward Engineering

SET @OLD_UNIQUE_CHECKS=@@UNIQUE_CHECKS, UNIQUE_CHECKS=0;
SET @OLD_FOREIGN_KEY_CHECKS=@@FOREIGN_KEY_CHECKS, FOREIGN_KEY_CHECKS=0;
SET @OLD_SQL_MODE=@@SQL_MODE, SQL_MODE='TRADITIONAL,ALLOW_INVALID_DATES';

-- -----------------------------------------------------
-- Schema puertacontrol
-- -----------------------------------------------------
DROP SCHEMA IF EXISTS `puertacontrol` ;

-- -----------------------------------------------------
-- Schema puertacontrol
-- -----------------------------------------------------
CREATE SCHEMA IF NOT EXISTS `puertacontrol` DEFAULT CHARACTER SET utf8 ;
USE `puertacontrol` ;

-- -----------------------------------------------------
-- Table `puertacontrol`.`rol`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `puertacontrol`.`rol` (
  `code` VARCHAR(5) NOT NULL,
  `description` VARCHAR(20) NOT NULL,
  PRIMARY KEY (`code`))
ENGINE = InnoDB
COMMENT = 'Representa todos los roles que puede tener un usuario del sistema. El rol determina los permisos que puede tener el usuario.';


-- -----------------------------------------------------
-- Table `puertacontrol`.`user`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `puertacontrol`.`user` (
  `id` INT NOT NULL AUTO_INCREMENT,
  `username` VARCHAR(15) NOT NULL,
  `password` VARCHAR(15) NOT NULL,
  `code_rol` VARCHAR(5) NOT NULL,
  PRIMARY KEY (`id`),
  INDEX `fk_user_rol_idx` (`code_rol` ASC),
  CONSTRAINT `fk_user_rol`
    FOREIGN KEY (`code_rol`)
    REFERENCES `puertacontrol`.`rol` (`code`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION)
ENGINE = InnoDB
COMMENT = 'Representa todos los usuarios que pueden acceder al sistema';


-- -----------------------------------------------------
-- Table `puertacontrol`.`resource`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `puertacontrol`.`resource` (
  `id_resource` INT NOT NULL AUTO_INCREMENT,
  `path` VARCHAR(100) NOT NULL,
  `description` VARCHAR(20) NOT NULL,
  PRIMARY KEY (`id_resource`))
ENGINE = InnoDB;


-- -----------------------------------------------------
-- Table `puertacontrol`.`resources_x_rol`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `puertacontrol`.`resources_x_rol` (
  `id` INT NOT NULL AUTO_INCREMENT,
  `code_rol` VARCHAR(5) NOT NULL,
  `id_resource` INT NOT NULL,
  PRIMARY KEY (`id`),
  INDEX `fk_resources_x_rol_rol_idx` (`code_rol` ASC),
  INDEX `fk_resources_x_rol_resource_idx` (`id_resource` ASC),
  CONSTRAINT `fk_resources_x_rol_rol`
    FOREIGN KEY (`code_rol`)
    REFERENCES `puertacontrol`.`rol` (`code`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION,
  CONSTRAINT `fk_resources_x_rol_resource`
    FOREIGN KEY (`id_resource`)
    REFERENCES `puertacontrol`.`resource` (`id_resource`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION)
ENGINE = InnoDB;


-- -----------------------------------------------------
-- Table `puertacontrol`.`room_type`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `puertacontrol`.`room_type` (
  `id` INT NOT NULL AUTO_INCREMENT,
  `description` VARCHAR(60) NOT NULL,
  PRIMARY KEY (`id`))
ENGINE = InnoDB
COMMENT = 'Representa todas las habitaciones que tiene disponibles el sistema';


-- -----------------------------------------------------
-- Table `puertacontrol`.`status_room`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `puertacontrol`.`status_room` (
  `code` VARCHAR(5) NOT NULL,
  `description` VARCHAR(20) NOT NULL,
  `available` TINYINT(1) NOT NULL,
  PRIMARY KEY (`code`))
ENGINE = InnoDB
COMMENT = 'Representa los estados que puede tener una habitación.';


-- -----------------------------------------------------
-- Table `puertacontrol`.`room`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `puertacontrol`.`room` (
  `id` INT NOT NULL AUTO_INCREMENT,
  `number` VARCHAR(5) NOT NULL COMMENT 'Número que le asigna el cliente a la puerta de la habitación',
  `floor` INT NULL COMMENT 'Piso en el que se encuentra ubicada la habitación',
  `photo` VARCHAR(1000) NULL,
  `id_type` INT NULL,
  `code_status` VARCHAR(5) NULL,
  PRIMARY KEY (`id`),
  INDEX `fk_room_room_type_idx` (`id_type` ASC),
  INDEX `fk_room_status_idx` (`code_status` ASC),
  CONSTRAINT `fk_room_room_type`
    FOREIGN KEY (`id_type`)
    REFERENCES `puertacontrol`.`room_type` (`id`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION,
  CONSTRAINT `fk_room_status`
    FOREIGN KEY (`code_status`)
    REFERENCES `puertacontrol`.`status_room` (`code`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION)
ENGINE = InnoDB;


-- -----------------------------------------------------
-- Table `puertacontrol`.`package`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `puertacontrol`.`package` (
  `id` INT NOT NULL AUTO_INCREMENT,
  `description` VARCHAR(60) NOT NULL,
  `time_service` INT NOT NULL COMMENT 'Tiempo po defecto en el que la habitación es prestada a un cliente',
  `time_clean` INT NOT NULL COMMENT 'Tiempo po defecto en el que la habitación debe ser limpiada',
  `time_grace` INT NULL,
  PRIMARY KEY (`id`))
ENGINE = InnoDB
COMMENT = 'Tiempo de gracia que se le da a un cliente para dar por finalizado su servicio.';


-- -----------------------------------------------------
-- Table `puertacontrol`.`package_x_type_room`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `puertacontrol`.`package_x_type_room` (
  `id` INT NOT NULL AUTO_INCREMENT,
  `id_package` INT NOT NULL,
  `id_room_type` INT NOT NULL,
  PRIMARY KEY (`id`),
  INDEX `fk_package_x_type_room_package_idx` (`id_package` ASC),
  INDEX `fk_package_x_type_room_type_idx` (`id_room_type` ASC),
  CONSTRAINT `fk_package_x_type_room_package`
    FOREIGN KEY (`id_package`)
    REFERENCES `puertacontrol`.`package` (`id`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION,
  CONSTRAINT `fk_package_x_type_room_type`
    FOREIGN KEY (`id_room_type`)
    REFERENCES `puertacontrol`.`room_type` (`id`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION)
ENGINE = InnoDB
COMMENT = 'Representa los paquetes que puede ofrecer un tipo de habitación';


-- -----------------------------------------------------
-- Table `puertacontrol`.`service`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `puertacontrol`.`service` (
  `id` INT NOT NULL AUTO_INCREMENT,
  `id_user` INT NOT NULL,
  `id_room` INT NOT NULL,
  `id_package` INT NOT NULL,
  `time_service` INT NOT NULL,
  `time_clean` INT NOT NULL,
  `datetime_start_service` DATETIME NULL,
  `datetime_end_service` DATETIME NULL,
  `datetime_start_clean` DATETIME NULL,
  `datetime_end_clean` DATETIME NULL,
  PRIMARY KEY (`id`),
  INDEX `fk_service_room_idx` (`id_room` ASC),
  INDEX `fk_service_package_idx` (`id_package` ASC),
  INDEX `fk_service_user_idx` (`id_user` ASC),
  CONSTRAINT `fk_service_room`
    FOREIGN KEY (`id_room`)
    REFERENCES `puertacontrol`.`room` (`id`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION,
  CONSTRAINT `fk_service_package`
    FOREIGN KEY (`id_package`)
    REFERENCES `puertacontrol`.`package` (`id`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION,
  CONSTRAINT `fk_service_user`
    FOREIGN KEY (`id_user`)
    REFERENCES `puertacontrol`.`user` (`id`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION)
ENGINE = InnoDB
COMMENT = 'Representa el prestámo servicio que se hace de una habitación, en un paquete u horario especifico a un cliente.';


-- -----------------------------------------------------
-- Table `puertacontrol`.`alert_type`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `puertacontrol`.`alert_type` (
  `code` VARCHAR(5) NOT NULL,
  `description` VARCHAR(50) NOT NULL,
  `priority` VARCHAR(20) NOT NULL COMMENT 'Prioridad del tipo de alerta',
  PRIMARY KEY (`code`))
ENGINE = InnoDB
COMMENT = 'Representa los tipos de alerta que maneja la aplicación';


-- -----------------------------------------------------
-- Table `puertacontrol`.`alert`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `puertacontrol`.`alert` (
  `id` INT NOT NULL AUTO_INCREMENT,
  `id_service` INT NULL,
  `id_room` INT NULL,
  `code_type` VARCHAR(5) NULL,
  `date` DATETIME NULL,
  PRIMARY KEY (`id`),
  INDEX `fk_alert_type_idx` (`code_type` ASC),
  INDEX `fk_alert_service_idx` (`id_service` ASC),
  INDEX `fk_alert_room_idx` (`id_room` ASC),
  CONSTRAINT `fk_alert_type`
    FOREIGN KEY (`code_type`)
    REFERENCES `puertacontrol`.`alert_type` (`code`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION,
  CONSTRAINT `fk_alert_service`
    FOREIGN KEY (`id_service`)
    REFERENCES `puertacontrol`.`service` (`id`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION,
  CONSTRAINT `fk_alert_room`
    FOREIGN KEY (`id_room`)
    REFERENCES `puertacontrol`.`room` (`id`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION)
ENGINE = InnoDB;


-- -----------------------------------------------------
-- Table `puertacontrol`.`user_x_alert_type`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `puertacontrol`.`user_x_alert_type` (
  `id` INT NOT NULL AUTO_INCREMENT,
  `code_alert_type` VARCHAR(5) NOT NULL,
  `id_user` INT NOT NULL,
  PRIMARY KEY (`id`),
  INDEX `fk_user_x_alert_type_type_idx` (`code_alert_type` ASC),
  INDEX `fk_user_x_alert_type_user_idx` (`id_user` ASC),
  CONSTRAINT `fk_user_x_alert_type_type`
    FOREIGN KEY (`code_alert_type`)
    REFERENCES `puertacontrol`.`alert_type` (`code`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION,
  CONSTRAINT `fk_user_x_alert_type_user`
    FOREIGN KEY (`id_user`)
    REFERENCES `puertacontrol`.`user` (`id`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION)
ENGINE = InnoDB
COMMENT = 'Representa los usuarios que deben notificarse según el tipo de alerta';


-- -----------------------------------------------------
-- Table `puertacontrol`.`user_notified`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `puertacontrol`.`user_notified` (
  `id` INT NOT NULL AUTO_INCREMENT,
  `id_alert` INT NOT NULL,
  `id_user` INT NOT NULL,
  `date_first_notify` DATETIME NOT NULL,
  `no_notifications` INT NOT NULL,
  `date_readed` DATETIME NULL,
  PRIMARY KEY (`id`),
  INDEX `fk_user_notified_alert_idx` (`id_alert` ASC),
  INDEX `fk_user_notified_user_idx` (`id_user` ASC),
  CONSTRAINT `fk_user_notified_alert`
    FOREIGN KEY (`id_alert`)
    REFERENCES `puertacontrol`.`alert` (`id`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION,
  CONSTRAINT `fk_user_notified_user`
    FOREIGN KEY (`id_user`)
    REFERENCES `puertacontrol`.`user` (`id`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION)
ENGINE = InnoDB
COMMENT = 'Representa la notificación que se realizó para un usuario especifico.';


SET SQL_MODE=@OLD_SQL_MODE;
SET FOREIGN_KEY_CHECKS=@OLD_FOREIGN_KEY_CHECKS;
SET UNIQUE_CHECKS=@OLD_UNIQUE_CHECKS;
